prob_input=1-instructions$population$initialization$probability
threshold_mut=pop_size-threshold_cross-threshold_mut
#Input
cross_rate=instructions$genetic_operations$crossover$rate
mut_rate=instructions$genetic_operations$mutation$rate
ncores=instructions$application$cores
pop_size=instructions$population$size
threshold_cross=floor(pop_size*cross_rate)
index_method=instructions$population$evaluation$fitness_fnc
threshold_mut=floor(pop_size*mut_rate)
prob_input=1-instructions$population$initialization$probability
threshold_mut=pop_size-threshold_cross-threshold_mut
threshold_mut
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
ouput
output
source('~/.active-rstudio-document')
ouptut
outtut
output
source('~/.active-rstudio-document')
pop_rand$variable
length(pop_rand)
pop_rand
length(pop_rand$variable)
source('~/.active-rstudio-document')
pop_rand$variable
spop_rand=fnc_pop_evaluation(instructions,pop_rand,data)
spop_rand
length(population$variable)
source('C:/Users/Manuel/Desktop/MANUEL/UNIVERSIDAD/Trabajos de tesis - alumnos/Angelo Carlier/Genetico_v2/sources/operations/fnc_pop_evaluation.R')
pop_rand=fnc_pop_evaluation(instructions,pop_rand,data)
pop_rand$variable
pop_rand=fnc_pop_evaluation(instructions,pop_rand,data)
n=1
d1=data[,which(pop_rand$variable[[n]]==1)]
#Distance matrices
#depending on distance methods
if (distance_method=="EUC")
{mat_d1=as.matrix(dist(d1))
mat_d2=as.matrix(dist(d2))
}
if (distance_method=="MAN")
{mat_d1=as.matrix(dist(d1,method="manhattan"))
mat_d2=as.matrix(dist(d2,method="manhattan"))
}
if (distance_method=="SPE"){
#Compute the distance
mat_d1=as.matrix(as.matrix(Dist(d1, method = "spearman")))
mat_d2=as.matrix(as.matrix(Dist(d1, method = "spearman")))
}
if (distance_method=="CEN"){
#Compute the distance
mat_d1=as.matrix(as.matrix(Dist(d1, method = "correlation")))
mat_d2=as.matrix(as.matrix(Dist(d1, method = "correlation")))
}
options(warn=-1)
#KMEANS
set.seed(1)
c1_kme=kmeans(mat_d1,5)$cluster
set.seed(1)
c2_kme=kmeans(mat_d2,5)$cluster
#PAM
set.seed(1)
c1_pam=pam(mat_d1,5)$cluster
set.seed(1)
c2_pam=pam(mat_d2,5)$cluster
#CLARA
set.seed(1)
c1_cla=clara(mat_d1,5)$cluster
set.seed(1)
c2_cla=clara(mat_d2,5)$cluster
#FANNY
set.seed(1)
c1_fan=fanny(mat_d1,5)$cluster
set.seed(1)
c2_fan=fanny(mat_d2,5)$cluster
options(warn=0)
q1_kme=comPart(data$class, c1_kme,type=index_method)
q2_kme=comPart(data$class, c2_kme,type=index_method)
q1_pam=comPart(data$class, c1_pam,type=index_method)
q2_pam=comPart(data$class, c2_pam,type=index_method)
q1_cla=comPart(data$class, c1_cla,type=index_method)
q2_cla=comPart(data$class, c2_cla,type=index_method)
q1_fan=comPart(data$class, c1_fan,type=index_method)
q2_fan=comPart(data$class, c2_fan,type=index_method)
quality=round(c(q1_kme,q2_kme,q1_pam,q2_pam,q1_cla,q2_cla,q1_fan,q2_fan),3)
output=NULL
output$fitness=max(quality)[1]
n=1
d1=data[,which(pop_rand$variable[[n]]==1)]
#Distance matrices
#depending on distance methods
if (distance_method=="EUC")
{mat_d1=as.matrix(dist(d1))
mat_d2=as.matrix(dist(d2))
}
if (distance_method=="MAN")
{mat_d1=as.matrix(dist(d1,method="manhattan"))
mat_d2=as.matrix(dist(d2,method="manhattan"))
}
if (distance_method=="SPE"){
#Compute the distance
mat_d1=as.matrix(as.matrix(Dist(d1, method = "spearman")))
mat_d2=as.matrix(as.matrix(Dist(d1, method = "spearman")))
}
if (distance_method=="CEN"){
#Compute the distance
mat_d1=as.matrix(as.matrix(Dist(d1, method = "correlation")))
mat_d2=as.matrix(as.matrix(Dist(d1, method = "correlation")))
}
options(warn=-1)
#KMEANS
set.seed(1)
c1_kme=kmeans(mat_d1,5)$cluster
set.seed(1)
c2_kme=kmeans(mat_d2,5)$cluster
#PAM
set.seed(1)
c1_pam=pam(mat_d1,5)$cluster
set.seed(1)
c2_pam=pam(mat_d2,5)$cluster
#CLARA
set.seed(1)
c1_cla=clara(mat_d1,5)$cluster
set.seed(1)
c2_cla=clara(mat_d2,5)$cluster
#FANNY
set.seed(1)
c1_fan=fanny(mat_d1,5)$cluster
set.seed(1)
c2_fan=fanny(mat_d2,5)$cluster
options(warn=0)
q1_kme=comPart(data$class, c1_kme,type=index_method)
q2_kme=comPart(data$class, c2_kme,type=index_method)
q1_pam=comPart(data$class, c1_pam,type=index_method)
q2_pam=comPart(data$class, c2_pam,type=index_method)
q1_cla=comPart(data$class, c1_cla,type=index_method)
q2_cla=comPart(data$class, c2_cla,type=index_method)
q1_fan=comPart(data$class, c1_fan,type=index_method)
q2_fan=comPart(data$class, c2_fan,type=index_method)
quality=round(c(q1_kme,q2_kme,q1_pam,q2_pam,q1_cla,q2_cla,q1_fan,q2_fan),3)
output=NULL
output$fitness=max(quality)[1]
n=1
d1=data[,which(pop_rand$variable[[n]]==1)]
#Distance matrices
#depending on distance methods
if (distance_method=="EUC"){mat_d1=as.matrix(dist(d1))}
if (distance_method=="MAN"){mat_d1=as.matrix(dist(d1,method="manhattan"))}
if (distance_method=="SPE"){mat_d1=as.matrix(as.matrix(Dist(d1, method = "spearman")))}
if (distance_method=="CEN"){mat_d1=as.matrix(as.matrix(Dist(d1, method = "correlation")))}
options(warn=-1)
#KMEANS
set.seed(1)
c1_kme=kmeans(mat_d1,5)$cluster
#PAM
set.seed(1)
c1_pam=pam(mat_d1,5)$cluster
#CLARA
set.seed(1)
c1_cla=clara(mat_d1,5)$cluster
#FANNY
set.seed(1)
c1_fan=fanny(mat_d1,5)$cluster
set.seed(1)
q1_kme=comPart(data$class, c1_kme,type=index_method)
q1_pam=comPart(data$class, c1_pam,type=index_method)
q1_cla=comPart(data$class, c1_cla,type=index_method)
q1_fan=comPart(data$class, c1_fan,type=index_method)
quality=round(c(q1_kme,q1_pam,q1_cla,q1_fan),3)
output=NULL
output$fitness=max(quality)[1]
d1
n=1
d1=data[,which(pop_rand$variable[[n]]==1)]
#Distance matrices
#depending on distance methods
if (distance_method=="EUC"){mat_d1=as.matrix(dist(d1))}
if (distance_method=="MAN"){mat_d1=as.matrix(dist(d1,method="manhattan"))}
if (distance_method=="SPE"){mat_d1=as.matrix(as.matrix(Dist(d1, method = "spearman")))}
if (distance_method=="CEN"){mat_d1=as.matrix(as.matrix(Dist(d1, method = "correlation")))}
distance_method=instructions$population$evaluation$distance
d1=data[,which(pop_rand$variable[[n]]==1)]
#Distance matrices
#depending on distance methods
if (distance_method=="EUC"){mat_d1=as.matrix(dist(d1))}
if (distance_method=="MAN"){mat_d1=as.matrix(dist(d1,method="manhattan"))}
if (distance_method=="SPE"){mat_d1=as.matrix(as.matrix(Dist(d1, method = "spearman")))}
if (distance_method=="CEN"){mat_d1=as.matrix(as.matrix(Dist(d1, method = "correlation")))}
options(warn=-1)
#KMEANS
set.seed(1)
c1_kme=kmeans(mat_d1,5)$cluster
#PAM
set.seed(1)
c1_pam=pam(mat_d1,5)$cluster
#CLARA
set.seed(1)
c1_cla=clara(mat_d1,5)$cluster
#FANNY
set.seed(1)
c1_fan=fanny(mat_d1,5)$cluster
set.seed(1)
q1_kme=comPart(data$class, c1_kme,type=index_method)
q1_pam=comPart(data$class, c1_pam,type=index_method)
q1_cla=comPart(data$class, c1_cla,type=index_method)
q1_fan=comPart(data$class, c1_fan,type=index_method)
quality=round(c(q1_kme,q1_pam,q1_cla,q1_fan),3)
output=NULL
output$fitness=max(quality)[1]
output$fitness
n=1
distance_method=instructions$population$evaluation$distance
d1=data[,which(pop_rand$variable[[n]]==1)]
#Distance matrices
#depending on distance methods
if (distance_method=="EUC"){mat_d1=as.matrix(dist(d1))}
if (distance_method=="MAN"){mat_d1=as.matrix(dist(d1,method="manhattan"))}
if (distance_method=="SPE"){mat_d1=as.matrix(as.matrix(Dist(d1, method = "spearman")))}
if (distance_method=="CEN"){mat_d1=as.matrix(as.matrix(Dist(d1, method = "correlation")))}
options(warn=-1)
#KMEANS
set.seed(1)
c1_kme=kmeans(mat_d1,5)$cluster
#PAM
set.seed(1)
c1_pam=pam(mat_d1,5)$cluster
#CLARA
set.seed(1)
c1_cla=clara(mat_d1,5)$cluster
#FANNY
set.seed(1)
c1_fan=fanny(mat_d1,5)$cluster
set.seed(1)
q1_kme=comPart(data$class, c1_kme,type=index_method)
q1_pam=comPart(data$class, c1_pam,type=index_method)
q1_cla=comPart(data$class, c1_cla,type=index_method)
q1_fan=comPart(data$class, c1_fan,type=index_method)
output=NULL
output$variable=population$variable[[n]]
output$methods=c("KME","CLA","PAM","FAN")[which.max(quality)]
output$fitness=round(quality[which.max(quality)],3)
output$mean_fitness=mean(quality)
output
sample(0:1,(ncol(data)-1),replace = T,prob = c(prob_input,(1-prob_input))))
sample(0:1,(ncol(data)-1),replace = T,prob = c(prob_input,(1-prob_input)))
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
pop_rand
pop_rand[[1]]$variable
pop_rand[[1]]$methods
pop_rand[[1]]$fitness
variable=sample(0:1,(ncol(data)-1),replace = T,prob = c(prob_input,(1-prob_input)))
variable
source('~/.active-rstudio-document')
pop_rand
pop_rand[[1]]$mean_fitness
length(output$variable)
source('~/.active-rstudio-document')
output$mean_fitness
output$fitness
output$variable[[1]]
output$variable[[]]
output$variable[[2]]
output$variable[[3]]
length(output_tmp)
output_tmp[[1]]$variable
output_tmp[[2]]$variable
source('~/.active-rstudio-document')
output$fitness
output$mean_fitness
sample(0:1,(ncol(data)-1),replace = T,prob = c(prob_input,(1-prob_input)))
sample(0:1,(ncol(data)-1),replace = T,prob = c(prob_input,(1-prob_input)))
threshold_rand
source('~/.active-rstudio-document')
output$fitness
output_tmp[[1]]$fitness
output_tmp[[2]]$fitness
output_tmp[[3]]$fitness
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
output$fitness
output$methods
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
output$variable
output$methods
output$fitness
source('~/.active-rstudio-document')
output
source('C:/Users/Manuel/Desktop/MANUEL/UNIVERSIDAD/Trabajos de tesis - alumnos/Angelo Carlier/Genetico_v2/sources/operations/fnc_rand_population.R')
source('C:/Users/Manuel/Desktop/MANUEL/UNIVERSIDAD/Trabajos de tesis - alumnos/Angelo Carlier/Genetico_v2/sources/operations/fnc_rand_population.R')
#Genetic operations: random solutions
pop_rand=fnc_rand_population(instructions,population,data)
source('C:/Users/Manuel/Desktop/MANUEL/UNIVERSIDAD/Trabajos de tesis - alumnos/Angelo Carlier/Genetico_v2/main.R')
source('C:/Users/Manuel/Desktop/MANUEL/UNIVERSIDAD/Trabajos de tesis - alumnos/Angelo Carlier/Genetico_v2/main.R')
d1=data[,which(population$variable==1)]
d1=data[,which(population$variable==1)]
data[,which(population$variable==1)]
d1=data[,which(population$variable[[1]]==1)]
mat_d1=as.matrix(as.matrix(Dist(d1, method = "correlation")))
population$methods[[1]]
set.seed(1)
c1_fan=fanny(mat_d1,5)$cluster
q1_fan=comPart(data$class, c1_fan,type="FM")
q1_fan
q1_fan=comPart(data$class, c1_fan,type="J")
q1_fan
source('~/.active-rstudio-document')
model
model$modelInfo
model$results
nrow(data)
model$results
model$pred
model$bestTune
model$metric
model$xlevels
model$terms
model$levels
model$times
model$perfNames
model$finalModel
model$finalModel
model$results$mtry
model$pred
model$bestTune$mtry
model$dots
model$finalModel
model$finalModel$type
model$finalModel$predicted
as.numeric(model$finalModel$predicted)
as.numeric(model$finalModel$predicted)
comPart(data$class,model$finalModel$predicted,"J")
comPart(data$class,model$finalModel$predicted,c("ARI","RI","J","FM"))
source('~/.active-rstudio-document')
comPart(data$class,model$finalModel$predicted,c("ARI","RI","J","FM"))
model$finalModel$obsLevels
model$finalModel$learn
model$finalModel$learn$y
comPart(data$class,model$finalModel$learn$y,c("ARI","RI","J","FM"))
model$finalModel$learn$X
model$finalModel$obsLevels
model$finalModel$param
model$finalModel$tuneValue
model$finalModel$k
model$finalModel$learn
model$finalModel$learn$y
model$finalModel$param
model$finalModel$learn
model$xlevels
model$coefnames
model$terms
model$terms
model$levels
model$perfNames
model$pred
model$method
model$modelInfo
model$modelType
model$results
model$pred
model$bestTune
model$results$k
model$results$Kappa
model$modelInfo$predictors()
model$call
source('~/.active-rstudio-document')
model$modelInfo
model$results
model$pred
model$bestTune
model$call
model$modelInfo
model$metric
model$levels
model$coefnames
model$finalModel
model$finalModel$predicted
as.numeric(model$finalModel$predicted)
comPart(data$class,as.numeric(model$finalModel$predicted),"J")
source('~/.active-rstudio-document', encoding = 'UTF-8')
model$finalModel
model$results
model$problemType
source('~/.active-rstudio-document', encoding = 'UTF-8')
model$pred
model$results
model$finalModel$y
as.numeric(model$finalModel$y)
comPart(data$class,as.numeric(model$finalModel$y),"J")
model$finalModel
model$finalModel$yData
comPart(data$class,as.numeric(model$finalModel$yData),"J")
model$finalModel
model$finalModel$yhat
comPart(data$class,as.numeric(model$finalModel$yhat),"J")
source('~/.active-rstudio-document', encoding = 'UTF-8')
comPart(data$class,as.numeric(model$finalModel$yhat),"J")
model$finalModel
model$finalModel$theDots
model$finalModel$xNames
model$finalModel$problemType
model$finalModel$param
model$finalModel$obsLevels
model$finalModel$obsLevels
model$finalModel$tuneValue
model$finalModel$problemType
model$finalModel$tuneValue$k
model$finalModel$learn
model$finalModel$learn$y
model$finalModel$theDots$
model$finalModel$theDots
source('~/.active-rstudio-document', encoding = 'UTF-8')
model$finalModel
model$finalModel$obsLevels
model$finalModel$dat
model$finalModel
model
model$coefnames
model$xlevels
model$terms
model$levels
model$perfNames
model$metric
model$method
model$modelInfo
model$modelType
model$results
model$pred
model$bestTune
model$call
model$dots
model$control
model$resampledCM
model$perfNames
source('C:/Users/Manuel/Desktop/MANUEL/UNIVERSIDAD/Trabajos de tesis - alumnos/Angelo Carlier/Genetico/backup/main.R')
main()
setwd("C:/Users/Manuel/Desktop/MANUEL/UNIVERSIDAD/Trabajos de tesis - alumnos/Angelo Carlier/Genetico/base")
main()
source('C:/Users/Manuel/Desktop/MANUEL/UNIVERSIDAD/Trabajos de tesis - alumnos/Angelo Carlier/Genetico/backup/main.R')
main()
setwd("C:/Users/Manuel/Desktop/MANUEL/UNIVERSIDAD/Trabajos de tesis - alumnos/Angelo Carlier/Genetico/backup")
source('C:/Users/Manuel/Desktop/MANUEL/UNIVERSIDAD/Trabajos de tesis - alumnos/Angelo Carlier/Genetico/backup/main.R')
main()
source('C:/Users/Manuel/Desktop/MANUEL/UNIVERSIDAD/Trabajos de tesis - alumnos/Angelo Carlier/Genetico/backup/main.R')
main()
population$variable
population$variable[[1]]
population$methods
population$fitness
population$mean_fitness
source('C:/Users/Manuel/Desktop/MANUEL/UNIVERSIDAD/Trabajos de tesis - alumnos/Angelo Carlier/Genetico/backup/main.R')
source('C:/Users/Manuel/Desktop/MANUEL/UNIVERSIDAD/Trabajos de tesis - alumnos/Angelo Carlier/Genetico/backup/main.R')
source('C:/Users/Manuel/Desktop/MANUEL/UNIVERSIDAD/Trabajos de tesis - alumnos/Angelo Carlier/Genetico/backup/main.R')
main()
population$fitness
source('C:/Users/Manuel/Desktop/MANUEL/UNIVERSIDAD/Trabajos de tesis - alumnos/Angelo Carlier/Genetico/backup/main.R')
main()
population
population=main()
population=main()
2^294
2^594
2^6000
2^3000
2^1000
algorithms2$fit
algorithms2$fit=c(1,2,3)
algorithms2=NULL
algorithms2$fit=c(1,2,3)
algorithms1=algorithms2
t.test(algorithms$fit[[a]],algorithms2$fit[[b]])
t.test(algorithms1$fit[[a]],algorithms2$fit[[b]])
t.test(algorithms1$fit[[1]],algorithms2$fit[[1]])
t.test(algorithms1$fit[[2]],algorithms2$fit[[2]])
algorithms1$fit[[1]]
algorithms1$fit[[2]]
algorithms1$fit
t.test(algorithms1$fit,algorithms2$fit)
t.test(algorithms1$fit,algorithms1$fit)
t.test(algorithms1$fit,algorithms2$fit)
t.test(algorithms1$fit,algorithms2$fit)
t.test(algorithms1$fit,algorithms1$fit)
t.test(algorithms1$fit,algorithms1$fit)
a=c(1,1,1,1,1)
b=a
t.test(b,a)
t.test(b,a,paired = T)
caca=t.test(b,a,paired = T)
caca<0.05
if (caca<0.05)
)
if (caca<0.05) {print("hola")}
)caca
caca
caca$p.value
if (caca$p.value<0.05) {print("hola")}
if (caca$p.value<0.05) {print("hola")}
if (caca$p.value<=0.05) {print("hola")}
if (as.numeric(caca$p.value)<=0.05) {print("hola")}
as.numeric(caca$p.value)
t.test(b,a,paired = T)
kw(b,a,paired = T)
wilcoxon(b,a,paired = T)
wilcox.test(a,b)
wilcox.test(a,b,paired = T)
