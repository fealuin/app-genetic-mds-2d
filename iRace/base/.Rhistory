#Read the yml file
instructions=read_yaml("instructions.yml")
input
nput=NULL
input$pop_size=sample(10:100,n_pop_size)
input$cross_rate=round(runif(n_pop_size,0.1,0.4),2)
input$mut_rate=round(runif(n_pop_size,0.1,0.4),2)
input$met_ini=sample(c("RAND","GPS","KNN","OWNN","PAM","SNN","RF"),n_pop_size,replace=T)
#Read the yml file
instructions=read_yaml("instructions.yml")
source('~/.active-rstudio-document')
algorithms
algorithms$pop_size
algorithms$sasa
length(algorithms$pop_size)
source('~/.active-rstudio-document')
input$pop_size
n_eval
length(algorithms$pop_size)
main
source("./tunning_scripts/fnc_alg_evaluation.R")
source("/tunning_scripts/fnc_alg_evaluation.R")
list.files()
list.files(".")
list.files("./")
list.files("../")
source("../tunning_scripts/fnc_alg_evaluation.R")
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
algorithms
algorithms[[1]]
algorithms[[2]]
algorithms[[3]]
algorithms
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
algorithms
source('~/.active-rstudio-document')
algorithms
statistic_dunn=dunn.test(algorithms$fit,method = "sidak")
caca=NULL
attr(caca,"a")=3
attr(caca,"a")=NULL
attr(caca,"a")="caca"
caca
?attr
attr(caca,"a")=3
caca[["manuel"]]=3
caca
caca[["lista"]][1]=3
caca[["lista"]][[1]]=3
caca[["lista"]][[1]]=3
caca
caca[["lista"]]=3
caca
caca=NULL
attr(caca,"manuel")=3
caca$'manuel'=3
caca
caca$manuel
"parameter"
a="parameter"
caca$a=3
caca
caca$'a'=3
caca
$`(caca, a)
caca$`(caca, a)
'
caca
'sdas""'
as
"32"
e'd'
e
][5[p67u;]]
''
's'
d'sa'
d'sa'
d'sa"""""""
.>
=[]
''
'
||
""
"
"
$
_
_)
]]]
d'sa'
d'sa'
d'sa'
]]]
"
``
-
+
=3
;
q()
end
()
caca
reestar
sa''[]-\{
::>9
}
assign("test",a)
test
test$parameter
assign?
?
"
Â¿
}}
''[]
saP1
\
//
;
[]
]
-
0
9
||
!
332
:
??
/.,,
/`./l;'1`
['{0-0']
-0
-0
[]\-][\]
]
p
?assign
class(algorithm)
class(algorithms)
algorithms[[1]]
algorithms[[2]]
algorithms[[3]]
algorithms[[4]]
algorithms[[5]]
algorithms[[6]]
algorithms[[7]]
length(algorithms)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
algorithms
dunn.test(algorithms$fit,method = "sidak")
statistic_dunn=dunn.test(algorithms$fit,method = "sidak")
statistic_dunn=dunn.test(algorithms$fit,method = "sidak",kw = V)
statistic_dunn=dunn.test(algorithms$fit,method = "sidak",kw = F)
statistic_dunn=dunn.test(algorithms$fit,method = "sidak",kw = T)
statistic_dunn=dunn.test(algorithms$fit,method = "sidak",label = T)
statistic_dunn=dunn.test(algorithms$fit,method = "sidak",label = F)
statistic_dunn=dunn.test(algorithms$fit,method = "sidak",label)
statistic_dunn=dunn.test(algorithms$fit,method = "sidak")
?dunn.test
statistic_dunn=dunn.test(algorithms$fit,method = "sidak",table=F)
statistic_dunn=dunn.test(algorithms$fit,method = "sidak",table=F,list=F)
statistic_dunn=dunn.test(algorithms$fit,method = "sidak",table=F,list=F,wreap=F)
statistic_dunn=dunn.test(algorithms$fit,method = "sidak",table=F,list=F,wrap=F)
statistic_dunn=dunn.test(algorithms$fit,method = "sidak",table=F,list=F,wrap=F,label=F)
statistic_dunn=dunn.test(algorithms$fit,method = "sidak",table=F,kw=F)
statistic_dunn=dunn.test(algorithms$fit,method = "sidak",table=F,kw=F,alpha = F)
statistic_dunn=dunn.test(algorithms$fit,method = "sidak",table=F,kw=F,alpha = F)
statistic_dunn=dunn.test(algorithms$fit,method = "sidak",table=F,kw=F,label=F)
statistic_dunn=dunn.test(algorithms$fit,method = "sidak",table=F,kw=F,label=F,list=F)
statistic_dunn=capture.output(dunn.test(algorithms$fit,method = "sidak")
)
statistic_dunn
statistic_dunn=capture.output(dunn.test(algorithms$fit,method = "sidak",kw = F,table = F)
)
statistic_dunn=dunn.test(algorithms$fit,method = "sidak",kw = F,table = F)
algorithms
statistic_dunn
statistic_dunn$comparisons
statistic_dunn$P.adjusted
algorithms
source("../tunning_scripts/fnc_statistic_filter.R")
algorithms=fnc_statistic_filter(n_algorithms)
algorithms$fit
(algorithms$fit,method = "sidak")
dunn.test(algorithms$fit,method = "sidak")
fnc_statistic_filter(algorithms)
algorithms$fit[3]
lenght(algorithms$fit)
length(algorithms$fit)
algorithms2=algorithms
algorithms2$fit=algorithms2$fit-0.5
algorithms2$fit
algorithms2$fit[[3]]
algorithms2$fit[[3]]=algorithms2$fit[[3]]-0.5
algorithms2$fit[[3]]=algorithms2$fit[[3]]-0.5
algorithms2=fnc_statistic_filter(algorithms2)
algorithms2
algorithms2=algorithms
algorithms2$fit[[3]]
algorithms2$fit[[3]]=algorithms2$fit[[3]]-0.5
algorithms2$fit
algorithms2=fnc_statistic_filter(algorithms2)
algorithms2
algorithms2
algorithms
#Comparison between solutions
statistic_dunn=dunn.test(algorithms$fit,method = "sidak")
exclusion=which(statistic_dunn$P.adjusted<=0.05)
if (length(exclusion)!=0)
{
#Determine the small pvalues
val_tmp_num=NULL
}
exclusion
statistic_dunn=dunn.test(algorithms$fit,method = "sidak")
statistic_dunn=dunn.test(algorithms2$fit,method = "sidak")
algorithms2=algorithms
algorithms2$fit[[3]]=algorithms2$fit[[3]]-0.5
statistic_dunn=dunn.test(algorithms$fit,method = "sidak")
exclusion=which(statistic_dunn$P.adjusted<=0.05)
exclusion
statistic_dunn=dunn.test(algorithms2$fit,method = "sidak")
exclusion=which(statistic_dunn$P.adjusted<=0.05)
exclusion
#Determine the small pvalues
val_tmp_num=NULL
for( a in 1:length(statistic_dunn$comparisons[exclusion]))
{ val_tmp=strsplit(statistic_dunn$comparisons[[exclusion[a]]],"-")
val_tmp=as.numeric(val_tmp[[1]][[2]])
val_tmp_num=c(val_tmp_num,val_tmp)
}
val_tmp
source('C:/Users/Manuel/Desktop/MANUEL/UNIVERSIDAD/Trabajos de tesis - alumnos/Angelo Carlier/Genetico/tunning_scripts/fnc_statistic_filter.R')
algorithms2=fnc_statistic_filter(algorithms2)
algorithms2
algorithms2=algorithms
algorithms2$fit[[3]]=algorithms2$fit[[3]]-0.5
algorithms2=fnc_statistic_filter(algorithms2)
algorithms2
source('~/.active-rstudio-document')
#Built rulette evaluation
pop_tmp=2#length(algorithms$fitmean)
roulette=c(0,cumsum(as.numeric(algorithms$fitmean)/sum(as.numeric(algorithms$fitmean)))[1:(pop_tmp-1)])
roulette
algorithms2
algorithms
pop_tmp=2#length(algorithms$fitmean)
roulette=c(0,cumsum(as.numeric(algorithms$fitmean)/sum(as.numeric(algorithms$fitmean)))[1:(pop_tmp)])
roulette
source('~/.active-rstudio-document')
roulette
sum(roulette)
#Built rulette evaluation
pop_tmp=3#length(algorithms$fitmean)
roulette=round(c(0,cumsum(as.numeric(algorithms$fitmean)/sum(as.numeric(algorithms$fitmean)))[1:(pop_tmp)]),2)
roulette
#Built rulette evaluation
pop_tmp=3#length(algorithms$fitmean)
roulette=round(c(0,cumsum(as.numeric(algorithms$fitmean)/sum(as.numeric(algorithms$fitmean)))[1:(pop_tmp-1)]),2)
roulette
sum(roulete)
sum(roulette)
#Built rulette evaluation
pop_tmp=3#length(algorithms$fitmean)
roulette=round(c(0,cumsum(as.numeric(algorithms$fitmean)/sum(as.numeric(algorithms$fitmean)))[1:(pop_tmp-1)]),2)
pop_tmp
roulette=round(c(0,cumsum(as.numeric(algorithms$fitmean)/sum(as.numeric(algorithms$fitmean)))[1:(pop_tmp-1)]),2)
rouletet
roulette
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
roulette
algorithms2
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
roulette
runif(pop_tmp,0,1.5)
runif(pop_tmp,0,1.5)
runif(pop_tmp,0,1.5)
runif(pop_tmp,0,1.5)
runif(pop_tmp,0,1.5)
findInterval( 0.5595673,roulette)
findInterval( 0.5595673,roulette)
findInterval(0.2,roulette)
findInterval(1.4,roulette)
pop_tmp
selection1=findInterval(runif(pop_size,0,1.5),roulette)
selection1=findInterval(runif(n_algorithms,0,1.5),roulette)
selection1
source('~/.active-rstudio-document')
length(selection)-pop_tmp+1
length(selection)-pop_tmp
source('~/.active-rstudio-document')
selection
source('~/.active-rstudio-document')
length(selection)-pop_tmp
n_algorithms-pop_tmp
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
input$gen
selection[a]
input$gen[pop_tmp+1]
sample(1,1,replace=T)
source('~/.active-rstudio-document')
input
?sample
sample(0:1,1)
sample(0:1,1)
sample(0:1,1)
sample(0:1,1)
sample(0:1,1)
input$gen
input$gen[[selection[a]]
input$gen[[selection[a]]]
input$gen[[selection[a]]]
#Built rulette evaluation
pop_tmp=length(algorithms)
roulette=round(c(0,cumsum(as.numeric(algorithms$fitmean)/sum(as.numeric(algorithms$fitmean)))[1:(pop_tmp)]),2)
roulette
algorithms
length(algorithms$fit)
#Built rulette evaluation
pop_tmp=length(algorithms$fit)
roulette=round(c(0,cumsum(as.numeric(algorithms$fitmean)/sum(as.numeric(algorithms$fitmean)))[1:(pop_tmp)]),2)
roulette
#Built rulette evaluation
pop_tmp=length(algorithms$fit)
roulette=round(c(0,cumsum(as.numeric(algorithms$fitmean)/sum(as.numeric(algorithms$fitmean)))[1:(pop_tmp-1)]),2)
roulette
selection=findInterval(runif((pop_tmp),0,1),roulette)
selection
selection=findInterval(runif((pop_tmp),0,1.5),roulette)
findInterval(runif((pop_tmp),0,1.5),roulette)
findInterval(runif((pop_tmp),0,1.5),roulette)
findInterval(runif((pop_tmp),0,1.5),roulette)
findInterval(runif((pop_tmp),0,1.5),roulette)
findInterval(runif((pop_tmp),0,1.5),roulette)
roulette
findInterval(runif((pop_tmp),0,1.5),roulette)
findInterval(runif((pop_tmp),0,1.5),roulette)
findInterval(runif((pop_tmp),0,1.5),roulette)
a=runif((pop_tmp),0,1.5)
a
a=runif((pop_tmp),0,1.5)
a
a=runif((pop_tmp),0,1.5)
a
findInterval(a,roulette)
algorithms
roulette
1-0.68
#Built rulette evaluation
pop_tmp=length(algorithms$fit)
roulette=round(c(0,cumsum(as.numeric(algorithms$fitmean)/sum(as.numeric(algorithms$fitmean)))[1:(pop_tmp)]),2)
roulette
selection
source('~/.active-rstudio-document')
selection
selection=findInterval(runif((pop_tmp),0,1.5),roulette)
selection=findInterval(runif(n_var,0,1.5),roulette)
selection=findInterval(runif(n_var,0,1.5),roulette)
n_var=5 #Number of variables to interchange
selection=findInterval(runif(n_var,0,1.5),roulette)
selection
pop_tmp
selection
selection[1]
source('C:/Users/Manuel/Desktop/MANUEL/UNIVERSIDAD/Trabajos de tesis - alumnos/Angelo Carlier/Genetico/tunning_scripts/fnc_create_pop.R')
#Create a new set of solutions
input2=fnc_create_pop(algorithms,input)
input2
input
n_algorithms)
input$cross_rate=round(runif(n_algorithms
n_algorithms)
input$cross_rate=round(runif(n_algorithms
_))
n_algorithms)
input$cross_rate=round(runif(n_algorithms
))
n_algorithms
input=NULL
input$gen=sample(1,n_algorithms,replace=T)      #Number of the generations of the algorithm
input$pop_size=sample(10:100,n_algorithms)
input$cross_rate=round(runif(n_algorithms,0.1,0.4),2)
input$mut_rate=round(runif(n_algorithms,0.1,0.4),2)
input$met_ini=sample(c("RAND","GPS","KNN","OWNN","PAM","SNN","RF"),n_algorithms,replace=T)
input
#Create a new set of solutions
input2=fnc_create_pop(algorithms,input)
input2
algorithms$gen
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
algorithms
algorithm2
algorithms2
c(algorithms,algorithms2)
caca=c(algorithms,algorithms2)
caca$fit
caca$gen
algorithms
caca=c(algorithms,algorithms2)
caca$fit
caca$pop_size
algorithms,algorithms2
length(algorithm3$fit)
length(algorithms3$fit)
algorithms3=algorithms
algorithms3$fit
length(algorithms3$fit)
source('~/.active-rstudio-document')
algorithms3
t.test(algorithms$fit[[1]])
t.test(algorithms$fit[[1]],algorithms$fit[[2]])
t.test(algorithms$fit[[1]],algorithms$fit[[2]])$pvalue
t.test(algorithms$fit[[1]],algorithms$fit[[2]])
test=t.test(algorithms$fit[[1]],algorithms$fit[[2]])
test$p.value
algorithms3=algorithms
source('~/.active-rstudio-document')
a
test=t.test(algorithms$fit[[a]],algorithms2$fit[[b]])
b
algorithms2
algorithms2$fit
algorithms$fit
length(algorithms2)
source('~/.active-rstudio-document')
algorithms$fitmean
algorithms$fitmean[[a]]<algorithms$fitmean[[b]]
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
algorithms$fitmean
algorithms2$fitmean
source('~/.active-rstudio-document')
algorithms$fitmean[a]
algorithms2$fitmean[b]
source('~/.active-rstudio-document')
algorithms
algorithm2
algorithm3
algorithms
algorithm3
algorithms
algorithms3
algorithms3$gen
algorithms3$gen[1]
algorithms3$gen
algorithms3
algorithms
source('~/.active-rstudio-document')
algorithms
algorithms3
algorithms
source('C:/Users/Manuel/Desktop/MANUEL/UNIVERSIDAD/Trabajos de tesis - alumnos/Angelo Carlier/Genetico/irace.R')
algorithms
